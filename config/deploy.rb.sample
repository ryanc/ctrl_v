require 'bundler/setup'
require 'bundler/capistrano'
require 'capistrano-unicorn'

set :application, "ctrl_v"
set :repository,  "http://git.cavi.cc/ctrl_v.git"
set :scm, :git

# set :scm, :git # You can set :scm explicitly or Capistrano will make an intelligent guess based on known version control directory names
# Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`

set :default_environment, {
  'PATH' => "$HOME/.rbenv/shims:$HOME/.rbenv/bin:$PATH"
}

set :use_sudo, false

default_run_options[:pty] = true

set :user, "deploy"
set :group, user
set :runner, user

set :host, "SERVER_ADDRESS_HERE"

role :web, host
role :app, host
role :db, host, :primary => true
#role :db,  "your primary db-server here", :primary => true # This is where Rails migrations will run
#role :db,  "your slave db-server here"

set :rack_env, :production

set :deploy_to, "/srv/apps/#{application}"

# if you want to clean up old releases on each deploy uncomment this:
# after "deploy:restart", "deploy:cleanup"

# if you're still using the script/reaper helper you will need
# these http://github.com/rails/irs_process_scripts

# If you are using Passenger mod_rails uncomment this:
# namespace :deploy do
#   task :start do ; end
#   task :stop do ; end
#   task :restart, :roles => :app, :except => { :no_release => true } do
#     run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
#   end
# end

namespace :db do
  task :config do
    run "mkdir -p #{shared_path}/config"
    upload "config/database.yml", "#{shared_path}/config/database.yml"
    upload "config/settings.yml", "#{shared_path}/config/settings.yml"
    run "chmod -R 0600 #{shared_path}/config/*"
  end
  task :migrate do
    run("cd #{deploy_to}/current && /usr/bin/env rake migrate:up RACK_ENV=production")
  end
end

before "deploy:setup", "db:config"
before "deploy:setup", "deploy:secret"
after "deploy:update_code", "deploy:symlink_shared"
after 'deploy:restart', 'unicorn:restart'

namespace :deploy do
  task :setup_config do
    run  "mkdir -p #{shared_path}/sockets"
  end
  task :secret do
    secret_path = "#{shared_path}/config/secret.key"
    run "openssl rand 64 > #{secret_path}" unless File.exists? secret_path
    run "chmod 0600 #{secret_path}"
  end
  task :symlink_shared do
    run "ln -nfs #{shared_path}/config/secret.key #{release_path}/config/secret.key"
    run "ln -nfs #{shared_path}/config/database.yml #{release_path}/config/database.yml"
    run "ln -nfs #{shared_path}/config/settings.yml #{release_path}/config/settings.yml"
  end
end
